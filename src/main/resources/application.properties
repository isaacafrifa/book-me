spring.application.name=booking-service
server.port=8081

#Endpoints - referenced in cucumber
app.api.host=${API_HOST:http://localhost}
app.api.version=${API_VERSION:v1}

# Swagger Props
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.path=/api-docs/swagger

# DB Props
spring.datasource.url=jdbc:postgresql://postgres:5432/${DB_NAME}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

#flyway props
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration,classpath:db/system-data,classpath:db/errors
spring.jpa.hibernate.ddl-auto=validate

# Docker Compose props
spring.docker.compose.enabled=true
spring.docker.compose.file=./docker-compose.yml

# Feign Props - referenced in UserClient
user-feign.url=${USER_SERVICE_URL:http://localhost:8080}
user-feign.name=users

## Resilience4J props
resilience4j.circuitbreaker.instances.user_client.register-health-indicator=true
resilience4j.circuitbreaker.instances.user_client.sliding-window-type=count_based
resilience4j.circuitbreaker.instances.user_client.sliding-window-size=10
resilience4j.circuitbreaker.instances.user_client.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.user_client.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.user_client.wait-duration-in-open-state.seconds=5
resilience4j.circuitbreaker.instances.user_client.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.user_client.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.user_client.event-consumer-buffer-size=10
## Resilience4J Timeout props
resilience4j.timelimiter.instances.user_client.timeout-duration.seconds=3
## Resilience4J Retry props
resilience4j.retry.instances.user_client.max-attempts=3
resilience4j.retry.instances.user_client.wait-duration.seconds=5

# Monitoring props
management.endpoint.shutdown.enabled=false
management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=booking-service
management.tracing.sampling.probability=1.0
spring.cloud.openfeign.micrometer.enabled=true

## -- Rabbitmq props
rabbitmq.queue.name=${RABBITMQ_QUEUE_NAME:user_email_updates}

spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}

spring.rabbitmq.connection-timeout=5000
spring.rabbitmq.ssl.enabled=${RABBITMQ_SSL_ENABLED:false}

# Retry configuration
spring.rabbitmq.listener.simple.retry.enabled=true
# Wait 1s before first retry
spring.rabbitmq.listener.simple.retry.initial-interval=1000
# Attempt 3 times (initial + 2 retries)
spring.rabbitmq.listener.simple.retry.max-attempts=3
# Double the interval between retries
spring.rabbitmq.listener.simple.retry.multiplier=2.0
# Cap retry interval at 10s
spring.rabbitmq.listener.simple.retry.max-interval=10000