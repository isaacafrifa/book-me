openapi: 3.0.3
info:
  title: Booking API
  description: API for managing bookings
  contact:
    email: afrifa@example.com
  version: 1.0.0
externalDocs:
  description: Find out more about Booking API
  url: http://example.com
servers:
  - url: http://localhost:8080
    description: Local server
tags:
  - name: bookings
    description: Operations about bookings

paths:
  /bookings:
    get:
      summary: Get all bookings
      description: Returns a paginated list of all booking entries.
      operationId: getBookings
      tags:
        - bookings
      parameters:
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
            minimum: 0
          required: false
          description: Page number (defaults to 0)
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Number of bookings per page (defaults to 10)
          required: false
        - in: query
          name: direction
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: Sorting direction (defaults to ascending)
          required: false
        - in: query
          name: orderBy
          schema:
            type: string
            enum:
              - id
              - startTime
              - createdOn
              - status
            default: id
          description: Field to sort (defaults to id). Possible values are id, startTime, createdOn and status
          required: false
      responses:
        '200':
          description: Successful operation producing a paginated list of bookings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingsListDto'
        '400':
          description: Bad request (e.g., invalid parameter values)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    post:
      summary: Create a new booking
      description: Creates a new booking entry.
      operationId: createBooking
      tags:
        - bookings
      requestBody:
        description: Booking object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequestDto'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDto'
        '400':
          description: Bad request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '409':
          description: Conflict (e.g., booking conflicts with existing entries)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

  /bookings/{id}:
    get:
      summary: Get a booking by ID
      description: Returns a single booking entry by its ID.
      operationId: getBookingById
      tags:
        - bookings
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking to retrieve
      responses:
        '200':
          description: Successful operation returning a booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDto'
        '400':
          description: Bad request (e.g., invalid ID format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    put:
      summary: Update a booking by ID
      description: Updates an existing booking entry by its ID.
      operationId: updateBooking
      tags:
        - bookings
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking to update
      requestBody:
        description: Booking object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequestDto'
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDto'
        '400':
          description: Bad request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    delete:
      summary: Delete a booking by ID
      description: Deletes a booking entry by its ID.
      operationId: deleteBooking
      tags:
        - bookings
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the booking to delete
      responses:
        '200':
          description: Booking deleted successfully
        '400':
          description: Bad request (e.g., invalid ID format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'


components:
  schemas:
    BookingDto:
      type: object
      properties:
        bookingId:
          type: string
          format: uuid
        userId:
          type: integer
          format: int64
          example: 11256
          description: ID of the user who made the booking
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        bookingStatus:
          $ref: '#/components/schemas/BookingStatusDto'
        comments:
          type: string
    BookingStatusDto:
      type: string
      description: The status of the booking
      enum:
        - Pending
        - Confirmed
        - Cancelled
    BookingRequestDto:
      type: object
      required:
        - userEmail
        - startTime
      properties:
        userEmail:
          type: string
          # Ensure valid email format with stricter rules than basic format: email. Pattern is handled in code
          format: email
          description: Email address of the user
          example: user@example.com
          minLength: 10
          maxLength: 50
        startTime:
          type: string
          format: date-time
          description: Start time of the booking
          example: '2023-05-25T10:00:00.000Z'
        comments:
          type: string
          pattern: ^.{0,150}$
          description: Comments about the booking (max 150 characters)
          example: 'Special reservation for 4 persons'
    APIError:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: Invalid parameter value
        path:
          type: string
          description: Path of the request that caused the error
          example: /api/v1/bookings
        timeStamp:
          type: string
          format: date-time
          description: Timestamp of the error
          example: '2023-05-25T12:34:56.000Z'
    BookingsListDto:
      description: A paginated list of bookings
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookingDto'
        totalElements:
          type: integer
          format: int64
          description: Total number of bookings
          example: 100
        totalPages:
          type: integer
          format: int32
          description: Total number of pages
          example: 10


